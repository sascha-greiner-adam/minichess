	//Execute the negamax algorithm and return the score as an integer
	public int negamax(board b, int d) {
		int score=-10000;

		if (b.gameOver() != '?' || d == 0) return b.getScore();

		ArrayList<Move> ml = b.legalMoves();
		for (Move m : ml) {
			board b2=new board(b.toString());
			b2.move(m);
			score = Math.max(score, -negamax(b2,d-1));
		}
		return score;
	}

	public int negamax_prune_imp(board b, int d, int alpha, int beta) {
		int score=-10000;
		if (b.gameOver() != '?' || d == 0) return b.getImpScore();
		ArrayList<Move> ml = b.legalMoves();
		
		for (Move m : ml) {
			board b2=new board(b.toString());
			b2.move(m);
			score = Math.max(score,-negamax_prune_imp(b2,d-1,-beta,-alpha));
			alpha = Math.max(alpha, score);
			if (score >= beta) return score;
		}
		return score;
	}



	//thats the dumbest player 
	public char dumb_random() {
	ArrayList<Move> movelist = legalMoves();
	double rnd = Math.random();
	int rnd_int = (int)(rnd*movelist.size());
	if (movelist.isEmpty()) {
		System.out.println("Dumb Movelist leer!");
		return '=';
	} else {
		Move act_move = movelist.get(rnd_int);
		return move(act_move);
	}
}
	
	//he is the greedy dump player who takes always the nextbest move
	public Move half_dumb_random() {

		int score=10000;
		board copy = new board(this.toString());
		ArrayList<Move> movelist = copy.legalMoves();
		ArrayList<Move> exec_movelist = new ArrayList<Move>();
		for (Move m : movelist) {
			copy = new board(this.toString());
			copy.move(m);
			if (copy.getScore() < score) score=copy.getScore();
		}
		for (Move m : movelist) {
			copy = new board(this.toString());
			copy.move(m);
			if (copy.getScore() <= score) {
				exec_movelist.add(m);
			}
		}
		double rnd = Math.random();
		int rnd_int = (int)(rnd*exec_movelist.size());
		Move act_move = exec_movelist.get(rnd_int);
		return act_move;		
	}
	
	//he is the genius player and uses the negamax_prune algorithm and returns a Move object
	public Move nega_prune_player() {
		//Map<Move, Integer> map = new HashMap<Move, Integer>();
		Move m0=null;
		int v=-10000;
		int v0 = 0;
		int alpha=-10000;
		
		board copy = new board(this.toString());
		ArrayList<Move> movelist = copy.legalMoves();
		for (Move m : movelist) {
			copy = new board(this.toString());
			copy.move(m);
			v0 = Math.max(v,-negamax_prune(copy,4,-10000,-alpha,false));
			alpha = Math.max(alpha, v0);
			//map.put(m, v0);
			if (v0 > v) m0 = m;
			v = Math.max(v, v0);
			//System.out.println(m+" : "+v0);
		}

		return m0;
	}
	
	public Move nega_prune_imp_player() {
		//Map<Move, Integer> map = new HashMap<Move, Integer>();
		Move m0=null;
		int v=-10000;
		int v0 = 0;
		int alpha=-10000;
		
		board copy = new board(this.toString());
		ArrayList<Move> movelist = copy.legalMoves();
		for (Move m : movelist) {
			copy = new board(this.toString());
			copy.move(m);
			v0 = Math.max(v,-negamax_prune(copy,5,-10000,-alpha,false));
			alpha = Math.max(alpha, v0);
			//map.put(m, v0);
			if (v0 > v) m0 = m;
			v = Math.max(v, v0);
			//System.out.println(m+" : "+v0);
		}

		return m0;
	}

	
	//he is the quick player who uses the negamax algorithm
	public char nega_player_quick() {
		Map<Move, Integer> map = new HashMap<Move, Integer>();
		
		int score=10000;
		int negascore = 0;
		
		board copy = new board(this.toString());
		ArrayList<Move> movelist = copy.legalMoves();
		ArrayList<Move> exec_movelist = new ArrayList<Move>();
		for (Move m : movelist) {
			copy = new board(this.toString());
			copy.move(m);
			negascore = negamax(copy,3);
			if (negascore < score) score=negascore;
			map.put(m, negascore);
		}

		for (Map.Entry<Move, Integer> entry : map.entrySet()) {
		    if (entry.getValue() <= score) exec_movelist.add(entry.getKey());
		}
		
		double rnd = Math.random();
		int rnd_int = (int)(rnd*exec_movelist.size());
		if (movelist.isEmpty()) {
			System.out.println("Negamax Movelist leer!");
			return '=';
		} else {
			Move act_move = exec_movelist.get(rnd_int);
			return move(act_move);
		}
	}
	
	//the nega_player with only the negamax algorithm without any improvements
	public Move nega_player() {
		
		int score=10000;
		int negascore = 0;
		
		board copy = new board(this.toString());
		ArrayList<Move> movelist = copy.legalMoves();
		ArrayList<Move> exec_movelist = new ArrayList<Move>();
		for (Move m : movelist) {
			copy = new board(this.toString());
			copy.move(m);
			negascore = negamax(copy,3);
			if (negascore < score) score=negascore;
		}
		for (Move m : movelist) {
			copy = new board(this.toString());
			copy.move(m);
			if (negamax(copy,3) <= score) {
				exec_movelist.add(m);
			}
		}

		double rnd = Math.random();
		int rnd_int = (int)(rnd*exec_movelist.size());

			Move act_move = exec_movelist.get(rnd_int);
			return act_move;
	}

	public Move network_player(){
		int score=10000;
		int negascore = 0;
		board copy = new board(this.toString());
		ArrayList<Move> movelist = copy.legalMoves();
		ArrayList<Move> exec_movelist = new ArrayList<Move>();
		for (Move m : movelist) {
			copy = new board(this.toString());
			copy.move(m);
			negascore = negamax(copy,3);
			if (negascore < score) score=negascore;
		}
		for (Move m : movelist) {
			copy = new board(this.toString());
			copy.move(m);
			if (negamax(copy,3) <= score) {
				exec_movelist.add(m);
			}
		}
		double rnd = Math.random();
		int rnd_int = (int)(rnd*exec_movelist.size());
			Move act_move = exec_movelist.get(rnd_int);
			return act_move;
		
	}